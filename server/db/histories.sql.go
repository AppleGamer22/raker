// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: histories.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"strings"
)

const historyAdd = `-- name: HistoryAdd :exec
INSERT INTO Histories (
	username,
	type,
	owner,
	post,
	date
) VALUES (
	?,
	?,
	?,
	?,
	NOW()
)
`

type HistoryAddParams struct {
	Username sql.NullString    `json:"username"`
	Type     NullHistoriesType `json:"type"`
	Owner    string            `json:"owner"`
	Post     string            `json:"post"`
}

func (q *Queries) HistoryAdd(ctx context.Context, arg HistoryAddParams) error {
	_, err := q.exec(ctx, q.historyAddStmt, historyAdd,
		arg.Username,
		arg.Type,
		arg.Owner,
		arg.Post,
	)
	return err
}

const historyAddCategory = `-- name: HistoryAddCategory :exec
insert into HistoryCategories (
	username,
	type,
	owner,
	post,
	category
) values (
	?,
	?,
	?,
	?,
	?
)
`

type HistoryAddCategoryParams struct {
	Username sql.NullString            `json:"username"`
	Type     NullHistorycategoriesType `json:"type"`
	Owner    sql.NullString            `json:"owner"`
	Post     sql.NullString            `json:"post"`
	Category sql.NullString            `json:"category"`
}

func (q *Queries) HistoryAddCategory(ctx context.Context, arg HistoryAddCategoryParams) error {
	_, err := q.exec(ctx, q.historyAddCategoryStmt, historyAddCategory,
		arg.Username,
		arg.Type,
		arg.Owner,
		arg.Post,
		arg.Category,
	)
	return err
}

const historyAddFile = `-- name: HistoryAddFile :exec
insert into HistoryFiles (
	username,
	type,
	owner,
	post,
	file
) values (
	?,
	?,
	?,
	?,
	?
)
`

type HistoryAddFileParams struct {
	Username sql.NullString       `json:"username"`
	Type     NullHistoryfilesType `json:"type"`
	Owner    sql.NullString       `json:"owner"`
	Post     sql.NullString       `json:"post"`
	File     sql.NullString       `json:"file"`
}

func (q *Queries) HistoryAddFile(ctx context.Context, arg HistoryAddFileParams) error {
	_, err := q.exec(ctx, q.historyAddFileStmt, historyAddFile,
		arg.Username,
		arg.Type,
		arg.Owner,
		arg.Post,
		arg.File,
	)
	return err
}

const historyGet = `-- name: HistoryGet :one
SELECT username, type, owner, post, date FROM Histories
WHERE type = ?
	AND post = ?
	AND owner = ?
	AND username = ?
limit 30
`

type HistoryGetParams struct {
	Type     NullHistoriesType `json:"type"`
	Post     string            `json:"post"`
	Owner    string            `json:"owner"`
	Username sql.NullString    `json:"username"`
}

func (q *Queries) HistoryGet(ctx context.Context, arg HistoryGetParams) (History, error) {
	row := q.queryRow(ctx, q.historyGetStmt, historyGet,
		arg.Type,
		arg.Post,
		arg.Owner,
		arg.Username,
	)
	var i History
	err := row.Scan(
		&i.Username,
		&i.Type,
		&i.Owner,
		&i.Post,
		&i.Date,
	)
	return i, err
}

const historyGetExclusive = `-- name: HistoryGetExclusive :many
SELECT
	histories.username, histories.type, histories.owner, histories.post, histories.date,
	JSON_ARRAYAGG(category) as categories,
	JSON_ARRAYAGG(file) as files
FROM Histories
inner JOIN HistoryCategories
	on Histories.username = HistoryCategories.username
	and Histories.type = HistoryCategories.type
	and Histories.owner = HistoryCategories.owner
	and Histories.post = HistoryCategories.post
inner JOIN HistoryFiles
	on Histories.username = HistoryFiles.username
	and Histories.type = HistoryFiles.type
	and Histories.owner = HistoryFiles.owner
	and Histories.post = HistoryFiles.post
where Histories.type in (/*SLICE:types*/?)
	AND category in (/*SLICE:categories*/?)
	AND Histories.owner like ?
	AND Histories.username = ?
GROUP BY Histories.post
having count(HistoryCategories.post) = ?
limit 30
`

type HistoryGetExclusiveParams struct {
	Types         []NullHistoriesType `json:"types"`
	Categories    []sql.NullString    `json:"categories"`
	Owner         string              `json:"owner"`
	Username      sql.NullString      `json:"username"`
	CategoryCount sql.NullString      `json:"category_count"`
}

type HistoryGetExclusiveRow struct {
	History    History         `json:"history"`
	Categories json.RawMessage `json:"categories"`
	Files      json.RawMessage `json:"files"`
}

func (q *Queries) HistoryGetExclusive(ctx context.Context, arg HistoryGetExclusiveParams) ([]HistoryGetExclusiveRow, error) {
	query := historyGetExclusive
	var queryParams []interface{}
	if len(arg.Types) > 0 {
		for _, v := range arg.Types {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:types*/?", strings.Repeat(",?", len(arg.Types))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:types*/?", "NULL", 1)
	}
	if len(arg.Categories) > 0 {
		for _, v := range arg.Categories {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:categories*/?", strings.Repeat(",?", len(arg.Categories))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:categories*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Owner)
	queryParams = append(queryParams, arg.Username)
	queryParams = append(queryParams, arg.CategoryCount)
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HistoryGetExclusiveRow
	for rows.Next() {
		var i HistoryGetExclusiveRow
		if err := rows.Scan(
			&i.History.Username,
			&i.History.Type,
			&i.History.Owner,
			&i.History.Post,
			&i.History.Date,
			&i.Categories,
			&i.Files,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const historyGetInclusive = `-- name: HistoryGetInclusive :many
SELECT
	histories.username, histories.type, histories.owner, histories.post, histories.date,
	JSON_ARRAYAGG(category) as categories,
	JSON_ARRAYAGG(file) as files
FROM Histories
inner JOIN HistoryCategories
	on Histories.username = HistoryCategories.username
	and Histories.type = HistoryCategories.type
	and Histories.owner = HistoryCategories.owner
	and Histories.post = HistoryCategories.post
inner JOIN HistoryFiles
	on Histories.username = HistoryFiles.username
	and Histories.type = HistoryFiles.type
	and Histories.owner = HistoryFiles.owner
	and Histories.post = HistoryFiles.post
WHERE Histories.type in (/*SLICE:types*/?)
	AND category in (/*SLICE:categories*/?)
	AND Histories.owner like ?
	AND Histories.username = ?
GROUP BY Histories.post
limit 30
`

type HistoryGetInclusiveParams struct {
	Types      []NullHistoriesType `json:"types"`
	Categories []sql.NullString    `json:"categories"`
	Owner      string              `json:"owner"`
	Username   sql.NullString      `json:"username"`
}

type HistoryGetInclusiveRow struct {
	History    History         `json:"history"`
	Categories json.RawMessage `json:"categories"`
	Files      json.RawMessage `json:"files"`
}

// https://docs.sqlc.dev/en/stable/howto/select.html#passing-a-slice-as-a-parameter-to-a-query
// https://docs.sqlc.dev/en/stable/howto/named_parameters.html
func (q *Queries) HistoryGetInclusive(ctx context.Context, arg HistoryGetInclusiveParams) ([]HistoryGetInclusiveRow, error) {
	query := historyGetInclusive
	var queryParams []interface{}
	if len(arg.Types) > 0 {
		for _, v := range arg.Types {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:types*/?", strings.Repeat(",?", len(arg.Types))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:types*/?", "NULL", 1)
	}
	if len(arg.Categories) > 0 {
		for _, v := range arg.Categories {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:categories*/?", strings.Repeat(",?", len(arg.Categories))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:categories*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.Owner)
	queryParams = append(queryParams, arg.Username)
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HistoryGetInclusiveRow
	for rows.Next() {
		var i HistoryGetInclusiveRow
		if err := rows.Scan(
			&i.History.Username,
			&i.History.Type,
			&i.History.Owner,
			&i.History.Post,
			&i.History.Date,
			&i.Categories,
			&i.Files,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const historyRemove = `-- name: HistoryRemove :exec
DELETE FROM Histories
WHERE type = ?
	AND owner = ?
	AND post = ?
	AND username = ?
`

type HistoryRemoveParams struct {
	Type     NullHistoriesType `json:"type"`
	Owner    string            `json:"owner"`
	Post     string            `json:"post"`
	Username sql.NullString    `json:"username"`
}

func (q *Queries) HistoryRemove(ctx context.Context, arg HistoryRemoveParams) error {
	_, err := q.exec(ctx, q.historyRemoveStmt, historyRemove,
		arg.Type,
		arg.Owner,
		arg.Post,
		arg.Username,
	)
	return err
}

const historyRemoveCategory = `-- name: HistoryRemoveCategory :exec
delete from HistoryCategories
WHERE post = ?
	AND post = ?
	AND owner = ?
	AND category = ?
`

type HistoryRemoveCategoryParams struct {
	Post     sql.NullString `json:"post"`
	Owner    sql.NullString `json:"owner"`
	Category sql.NullString `json:"category"`
}

func (q *Queries) HistoryRemoveCategory(ctx context.Context, arg HistoryRemoveCategoryParams) error {
	_, err := q.exec(ctx, q.historyRemoveCategoryStmt, historyRemoveCategory,
		arg.Post,
		arg.Post,
		arg.Owner,
		arg.Category,
	)
	return err
}

const historyUpdateOwner = `-- name: HistoryUpdateOwner :exec
UPDATE Histories
SET owner = ?
WHERE post = ?
	AND owner = ?
	AND username = ?
`

type HistoryUpdateOwnerParams struct {
	OldOwner string         `json:"old_owner"`
	Post     string         `json:"post"`
	NewOwner string         `json:"new_owner"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) HistoryUpdateOwner(ctx context.Context, arg HistoryUpdateOwnerParams) error {
	_, err := q.exec(ctx, q.historyUpdateOwnerStmt, historyUpdateOwner,
		arg.OldOwner,
		arg.Post,
		arg.NewOwner,
		arg.Username,
	)
	return err
}

const updateHistoryRemoveFile = `-- name: UpdateHistoryRemoveFile :exec
delete from HistoryFiles
WHERE post = ?
	AND post = ?
	AND owner = ?
	AND username = ?
`

type UpdateHistoryRemoveFileParams struct {
	Post     sql.NullString `json:"post"`
	Owner    sql.NullString `json:"owner"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) UpdateHistoryRemoveFile(ctx context.Context, arg UpdateHistoryRemoveFileParams) error {
	_, err := q.exec(ctx, q.updateHistoryRemoveFileStmt, updateHistoryRemoveFile,
		arg.Post,
		arg.Post,
		arg.Owner,
		arg.Username,
	)
	return err
}
