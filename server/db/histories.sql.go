// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: histories.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const historyAdd = `-- name: HistoryAdd :exec
INSERT INTO Histories (
	username,
	type,
	owner,
	post,
	date,
	files,
	categories
) VALUES ($1, $2, $3, $4, NOW(), $5, $6)
`

type HistoryAddParams struct {
	Username   sql.NullString
	Type       string
	Owner      string
	Post       string
	Files      []string
	Categories []string
}

func (q *Queries) HistoryAdd(ctx context.Context, arg HistoryAddParams) error {
	_, err := q.db.ExecContext(ctx, historyAdd,
		arg.Username,
		arg.Type,
		arg.Owner,
		arg.Post,
		pq.Array(arg.Files),
		pq.Array(arg.Categories),
	)
	return err
}

const historyGet = `-- name: HistoryGet :one
SELECT username, type, owner, post, date, files, categories FROM Histories WHERE type = $1 AND post = $2
`

type HistoryGetParams struct {
	Type string
	Post string
}

func (q *Queries) HistoryGet(ctx context.Context, arg HistoryGetParams) (History, error) {
	row := q.db.QueryRowContext(ctx, historyGet, arg.Type, arg.Post)
	var i History
	err := row.Scan(
		&i.Username,
		&i.Type,
		&i.Owner,
		&i.Post,
		&i.Date,
		pq.Array(&i.Files),
		pq.Array(&i.Categories),
	)
	return i, err
}

const historyGetExclusive = `-- name: HistoryGetExclusive :many
SELECT username, type, owner, post, date, files, categories FROM Histories WHERE type = ANY($1::TEXT[]) AND categories = $2 AND OWNER LIKE $3
`

type HistoryGetExclusiveParams struct {
	Column1    []string
	Categories []string
	Owner      string
}

func (q *Queries) HistoryGetExclusive(ctx context.Context, arg HistoryGetExclusiveParams) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, historyGetExclusive, pq.Array(arg.Column1), pq.Array(arg.Categories), arg.Owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.Username,
			&i.Type,
			&i.Owner,
			&i.Post,
			&i.Date,
			pq.Array(&i.Files),
			pq.Array(&i.Categories),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const historyGetInclusive = `-- name: HistoryGetInclusive :many
SELECT username, type, owner, post, date, files, categories FROM Histories WHERE type = ANY($1::TEXT[]) AND categories <@ $2 AND OWNER LIKE $3
`

type HistoryGetInclusiveParams struct {
	Column1    []string
	Categories []string
	Owner      string
}

func (q *Queries) HistoryGetInclusive(ctx context.Context, arg HistoryGetInclusiveParams) ([]History, error) {
	rows, err := q.db.QueryContext(ctx, historyGetInclusive, pq.Array(arg.Column1), pq.Array(arg.Categories), arg.Owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.Username,
			&i.Type,
			&i.Owner,
			&i.Post,
			&i.Date,
			pq.Array(&i.Files),
			pq.Array(&i.Categories),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const historyRemove = `-- name: HistoryRemove :exec
DELETE FROM Histories where type = $1 AND owner = $2 AND post = $3
`

type HistoryRemoveParams struct {
	Type  string
	Owner string
	Post  string
}

func (q *Queries) HistoryRemove(ctx context.Context, arg HistoryRemoveParams) error {
	_, err := q.db.ExecContext(ctx, historyRemove, arg.Type, arg.Owner, arg.Post)
	return err
}

const historyUpdateCategories = `-- name: HistoryUpdateCategories :exec
UPDATE Histories SET categories = $3 WHERE type = $1 AND post = $2
`

type HistoryUpdateCategoriesParams struct {
	Type       string
	Post       string
	Categories []string
}

func (q *Queries) HistoryUpdateCategories(ctx context.Context, arg HistoryUpdateCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, historyUpdateCategories, arg.Type, arg.Post, pq.Array(arg.Categories))
	return err
}

const historyUpdateOwner = `-- name: HistoryUpdateOwner :exec
UPDATE Histories SET owner = $3 WHERE type = $1 AND owner = $2
`

type HistoryUpdateOwnerParams struct {
	Type    string
	Owner   string
	Owner_2 string
}

func (q *Queries) HistoryUpdateOwner(ctx context.Context, arg HistoryUpdateOwnerParams) error {
	_, err := q.db.ExecContext(ctx, historyUpdateOwner, arg.Type, arg.Owner, arg.Owner_2)
	return err
}

const updateHistoryRemoveFile = `-- name: UpdateHistoryRemoveFile :exec
UPDATE Histories SET files = array_remove(files, $3) WHERE type = $1 AND post = $2
`

type UpdateHistoryRemoveFileParams struct {
	Type        string
	Post        string
	ArrayRemove interface{}
}

func (q *Queries) UpdateHistoryRemoveFile(ctx context.Context, arg UpdateHistoryRemoveFileParams) error {
	_, err := q.db.ExecContext(ctx, updateHistoryRemoveFile, arg.Type, arg.Post, arg.ArrayRemove)
	return err
}
