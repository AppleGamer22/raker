// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type HistoriesType string

const (
	HistoriesTypeInstagram HistoriesType = "instagram"
	HistoriesTypeHighlight HistoriesType = "highlight"
	HistoriesTypeStory     HistoriesType = "story"
	HistoriesTypeTiktok    HistoriesType = "tiktok"
	HistoriesTypeVsco      HistoriesType = "vsco"
)

func (e *HistoriesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HistoriesType(s)
	case string:
		*e = HistoriesType(s)
	default:
		return fmt.Errorf("unsupported scan type for HistoriesType: %T", src)
	}
	return nil
}

type NullHistoriesType struct {
	HistoriesType HistoriesType `json:"histories_type"`
	Valid         bool          `json:"valid"` // Valid is true if HistoriesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHistoriesType) Scan(value interface{}) error {
	if value == nil {
		ns.HistoriesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HistoriesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHistoriesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HistoriesType), nil
}

func (e HistoriesType) Valid() bool {
	switch e {
	case HistoriesTypeInstagram,
		HistoriesTypeHighlight,
		HistoriesTypeStory,
		HistoriesTypeTiktok,
		HistoriesTypeVsco:
		return true
	}
	return false
}

type HistorycategoriesType string

const (
	HistorycategoriesTypeInstagram HistorycategoriesType = "instagram"
	HistorycategoriesTypeHighlight HistorycategoriesType = "highlight"
	HistorycategoriesTypeStory     HistorycategoriesType = "story"
	HistorycategoriesTypeTiktok    HistorycategoriesType = "tiktok"
	HistorycategoriesTypeVsco      HistorycategoriesType = "vsco"
)

func (e *HistorycategoriesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HistorycategoriesType(s)
	case string:
		*e = HistorycategoriesType(s)
	default:
		return fmt.Errorf("unsupported scan type for HistorycategoriesType: %T", src)
	}
	return nil
}

type NullHistorycategoriesType struct {
	HistorycategoriesType HistorycategoriesType `json:"historycategories_type"`
	Valid                 bool                  `json:"valid"` // Valid is true if HistorycategoriesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHistorycategoriesType) Scan(value interface{}) error {
	if value == nil {
		ns.HistorycategoriesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HistorycategoriesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHistorycategoriesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HistorycategoriesType), nil
}

func (e HistorycategoriesType) Valid() bool {
	switch e {
	case HistorycategoriesTypeInstagram,
		HistorycategoriesTypeHighlight,
		HistorycategoriesTypeStory,
		HistorycategoriesTypeTiktok,
		HistorycategoriesTypeVsco:
		return true
	}
	return false
}

type HistoryfilesType string

const (
	HistoryfilesTypeInstagram HistoryfilesType = "instagram"
	HistoryfilesTypeHighlight HistoryfilesType = "highlight"
	HistoryfilesTypeStory     HistoryfilesType = "story"
	HistoryfilesTypeTiktok    HistoryfilesType = "tiktok"
	HistoryfilesTypeVsco      HistoryfilesType = "vsco"
)

func (e *HistoryfilesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = HistoryfilesType(s)
	case string:
		*e = HistoryfilesType(s)
	default:
		return fmt.Errorf("unsupported scan type for HistoryfilesType: %T", src)
	}
	return nil
}

type NullHistoryfilesType struct {
	HistoryfilesType HistoryfilesType `json:"historyfiles_type"`
	Valid            bool             `json:"valid"` // Valid is true if HistoryfilesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullHistoryfilesType) Scan(value interface{}) error {
	if value == nil {
		ns.HistoryfilesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.HistoryfilesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullHistoryfilesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.HistoryfilesType), nil
}

func (e HistoryfilesType) Valid() bool {
	switch e {
	case HistoryfilesTypeInstagram,
		HistoryfilesTypeHighlight,
		HistoryfilesTypeStory,
		HistoryfilesTypeTiktok,
		HistoryfilesTypeVsco:
		return true
	}
	return false
}

type UsersNetwork string

const (
	UsersNetworkInstagram UsersNetwork = "instagram"
	UsersNetworkTiktok    UsersNetwork = "tiktok"
	UsersNetworkVsco      UsersNetwork = "vsco"
)

func (e *UsersNetwork) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersNetwork(s)
	case string:
		*e = UsersNetwork(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersNetwork: %T", src)
	}
	return nil
}

type NullUsersNetwork struct {
	UsersNetwork UsersNetwork `json:"users_network"`
	Valid        bool         `json:"valid"` // Valid is true if UsersNetwork is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersNetwork) Scan(value interface{}) error {
	if value == nil {
		ns.UsersNetwork, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersNetwork.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersNetwork) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersNetwork), nil
}

func (e UsersNetwork) Valid() bool {
	switch e {
	case UsersNetworkInstagram,
		UsersNetworkTiktok,
		UsersNetworkVsco:
		return true
	}
	return false
}

type History struct {
	Username sql.NullString    `json:"username"`
	Type     NullHistoriesType `json:"type"`
	Owner    string            `json:"owner"`
	Post     string            `json:"post"`
	Date     time.Time         `json:"date"`
}

type Historycategory struct {
	Username sql.NullString            `json:"username"`
	Type     NullHistorycategoriesType `json:"type"`
	Owner    sql.NullString            `json:"owner"`
	Post     sql.NullString            `json:"post"`
	Category sql.NullString            `json:"category"`
}

type Historyfile struct {
	Username sql.NullString       `json:"username"`
	Type     NullHistoryfilesType `json:"type"`
	Owner    sql.NullString       `json:"owner"`
	Post     sql.NullString       `json:"post"`
	File     sql.NullString       `json:"file"`
}

type Owner struct {
	Owner string `json:"owner"`
	Type  string `json:"type"`
}

type User struct {
	Username           string           `json:"username"`
	Hash               string           `json:"hash"`
	InstagramSessionID string           `json:"instagram_session_id"`
	InstagramUserID    string           `json:"instagram_user_id"`
	Network            NullUsersNetwork `json:"network"`
}

type Usercategory struct {
	Username sql.NullString `json:"username"`
	Category sql.NullString `json:"category"`
}
