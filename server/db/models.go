// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type NetworkType string

const (
	NetworkTypeInstagram NetworkType = "instagram"
	NetworkTypeTiktok    NetworkType = "tiktok"
	NetworkTypeVsco      NetworkType = "vsco"
)

func (e *NetworkType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = NetworkType(s)
	case string:
		*e = NetworkType(s)
	default:
		return fmt.Errorf("unsupported scan type for NetworkType: %T", src)
	}
	return nil
}

type NullNetworkType struct {
	NetworkType NetworkType `json:"network_type"`
	Valid       bool        `json:"valid"` // Valid is true if NetworkType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNetworkType) Scan(value interface{}) error {
	if value == nil {
		ns.NetworkType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.NetworkType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNetworkType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.NetworkType), nil
}

func (e NetworkType) Valid() bool {
	switch e {
	case NetworkTypeInstagram,
		NetworkTypeTiktok,
		NetworkTypeVsco:
		return true
	}
	return false
}

type PostType string

const (
	PostTypeInstagram PostType = "instagram"
	PostTypeHighlight PostType = "highlight"
	PostTypeStory     PostType = "story"
	PostTypeTiktok    PostType = "tiktok"
	PostTypeVsco      PostType = "vsco"
)

func (e *PostType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PostType(s)
	case string:
		*e = PostType(s)
	default:
		return fmt.Errorf("unsupported scan type for PostType: %T", src)
	}
	return nil
}

type NullPostType struct {
	PostType PostType `json:"post_type"`
	Valid    bool     `json:"valid"` // Valid is true if PostType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPostType) Scan(value interface{}) error {
	if value == nil {
		ns.PostType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PostType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPostType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PostType), nil
}

func (e PostType) Valid() bool {
	switch e {
	case PostTypeInstagram,
		PostTypeHighlight,
		PostTypeStory,
		PostTypeTiktok,
		PostTypeVsco:
		return true
	}
	return false
}

type History struct {
	Username   sql.NullString `json:"username"`
	Type       PostType       `json:"type"`
	Owner      string         `json:"owner"`
	Post       string         `json:"post"`
	Date       time.Time      `json:"date"`
	Files      []string       `json:"files"`
	Categories []string       `json:"categories"`
}

type Owner struct {
	Owner string `json:"owner"`
	Type  string `json:"type"`
}

type User struct {
	Username           string      `json:"username"`
	Hash               string      `json:"hash"`
	InstagramSessionID string      `json:"instagram_session_id"`
	InstagramUserID    string      `json:"instagram_user_id"`
	Network            NetworkType `json:"network"`
	Categories         []string    `json:"categories"`
}
