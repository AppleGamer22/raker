// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const userCategoryAdd = `-- name: UserCategoryAdd :exec
UPDATE Users SET categories = array(
	select unnest(array_append(categories, $1::text)) AS c ORDER BY c
) where username = $2::text
`

type UserCategoryAddParams struct {
	Category string `json:"category"`
	Username string `json:"username"`
}

func (q *Queries) UserCategoryAdd(ctx context.Context, arg UserCategoryAddParams) error {
	_, err := q.exec(ctx, q.userCategoryAddStmt, userCategoryAdd, arg.Category, arg.Username)
	return err
}

const userCategoryRemove = `-- name: UserCategoryRemove :exec
UPDATE Users SET categories = array_remove(categories, $1::text) where username = $2::text
`

type UserCategoryRemoveParams struct {
	Category string `json:"category"`
	Username string `json:"username"`
}

func (q *Queries) UserCategoryRemove(ctx context.Context, arg UserCategoryRemoveParams) error {
	_, err := q.exec(ctx, q.userCategoryRemoveStmt, userCategoryRemove, arg.Category, arg.Username)
	return err
}

const userGet = `-- name: UserGet :one
SELECT username, hash, instagram_session_id, instagram_user_id, network, categories FROM Users WHERE username = $1::text
`

func (q *Queries) UserGet(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.userGetStmt, userGet, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hash,
		&i.InstagramSessionID,
		&i.InstagramUserID,
		&i.Network,
		pq.Array(&i.Categories),
	)
	return i, err
}

const userUpdateHash = `-- name: UserUpdateHash :exec
UPDATE Users SET hash = $1::text where username = $2::text
`

type UserUpdateHashParams struct {
	Hash     string `json:"hash"`
	Username string `json:"username"`
}

func (q *Queries) UserUpdateHash(ctx context.Context, arg UserUpdateHashParams) error {
	_, err := q.exec(ctx, q.userUpdateHashStmt, userUpdateHash, arg.Hash, arg.Username)
	return err
}

const userUpdateInstagramSession = `-- name: UserUpdateInstagramSession :exec
UPDATE Users SET instagram_session_id = $1::text, instagram_user_id = $2::text where username = $3::text
`

type UserUpdateInstagramSessionParams struct {
	InstagramSessionID string `json:"instagram_session_id"`
	InstagramUserID    string `json:"instagram_user_id"`
	Username           string `json:"username"`
}

func (q *Queries) UserUpdateInstagramSession(ctx context.Context, arg UserUpdateInstagramSessionParams) error {
	_, err := q.exec(ctx, q.userUpdateInstagramSessionStmt, userUpdateInstagramSession, arg.InstagramSessionID, arg.InstagramUserID, arg.Username)
	return err
}

const userUser = `-- name: UserUser :exec
INSERT INTO Users (
	username,
	hash,
	instagram_session_id,
	instagram_user_id,
	network,
	categories
) VALUES (
	$1::text,
	$2::text,
	$3::text,
	$4::text,
	'instagram',
	$5::text[]
)
`

type UserUserParams struct {
	Username           string   `json:"username"`
	Hash               string   `json:"hash"`
	InstagramSessionID string   `json:"instagram_session_id"`
	InstagramUserID    string   `json:"instagram_user_id"`
	Categories         []string `json:"categories"`
}

func (q *Queries) UserUser(ctx context.Context, arg UserUserParams) error {
	_, err := q.exec(ctx, q.userUserStmt, userUser,
		arg.Username,
		arg.Hash,
		arg.InstagramSessionID,
		arg.InstagramUserID,
		pq.Array(arg.Categories),
	)
	return err
}
