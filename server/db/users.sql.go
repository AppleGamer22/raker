// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const userCategoryAdd = `-- name: UserCategoryAdd :exec
UPDATE Users SET categories = array(
	select unnest(array_append(categories, $2)) AS c ORDER BY c
) where username = $1
`

type UserCategoryAddParams struct {
	Username    string
	ArrayAppend interface{}
}

func (q *Queries) UserCategoryAdd(ctx context.Context, arg UserCategoryAddParams) error {
	_, err := q.db.ExecContext(ctx, userCategoryAdd, arg.Username, arg.ArrayAppend)
	return err
}

const userCategoryRemove = `-- name: UserCategoryRemove :exec
UPDATE Users SET categories = array_remove(categories, $2) where username = $1
`

type UserCategoryRemoveParams struct {
	Username    string
	ArrayRemove interface{}
}

func (q *Queries) UserCategoryRemove(ctx context.Context, arg UserCategoryRemoveParams) error {
	_, err := q.db.ExecContext(ctx, userCategoryRemove, arg.Username, arg.ArrayRemove)
	return err
}

const userGet = `-- name: UserGet :one
SELECT username, hash, instagram_session_id, instagram_user_id, network, categories FROM Users WHERE username = $1
`

func (q *Queries) UserGet(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, userGet, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hash,
		&i.InstagramSessionID,
		&i.InstagramUserID,
		&i.Network,
		pq.Array(&i.Categories),
	)
	return i, err
}

const userUpdateHash = `-- name: UserUpdateHash :exec
UPDATE Users SET hash = $2 where username = $1
`

type UserUpdateHashParams struct {
	Username string
	Hash     string
}

func (q *Queries) UserUpdateHash(ctx context.Context, arg UserUpdateHashParams) error {
	_, err := q.db.ExecContext(ctx, userUpdateHash, arg.Username, arg.Hash)
	return err
}

const userUpdateInstagramSession = `-- name: UserUpdateInstagramSession :exec
UPDATE Users SET instagram_session_id = $2, instagram_user_id = $3 where username = $1
`

type UserUpdateInstagramSessionParams struct {
	Username           string
	InstagramSessionID string
	InstagramUserID    string
}

func (q *Queries) UserUpdateInstagramSession(ctx context.Context, arg UserUpdateInstagramSessionParams) error {
	_, err := q.db.ExecContext(ctx, userUpdateInstagramSession, arg.Username, arg.InstagramSessionID, arg.InstagramUserID)
	return err
}

const userUser = `-- name: UserUser :exec
INSERT INTO Users (
	username,
	hash,
	instagram_session_id,
	instagram_user_id,
	network,
	categories
) VALUES ($1, $2, $3, $4, 'instagram', $5)
`

type UserUserParams struct {
	Username           string
	Hash               string
	InstagramSessionID string
	InstagramUserID    string
	Categories         []string
}

func (q *Queries) UserUser(ctx context.Context, arg UserUserParams) error {
	_, err := q.db.ExecContext(ctx, userUser,
		arg.Username,
		arg.Hash,
		arg.InstagramSessionID,
		arg.InstagramUserID,
		pq.Array(arg.Categories),
	)
	return err
}
