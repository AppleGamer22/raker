// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const userCategoriesGet = `-- name: UserCategoriesGet :one
SELECT category FROM UserCategories WHERE username = ?
`

func (q *Queries) UserCategoriesGet(ctx context.Context, username sql.NullString) (sql.NullString, error) {
	row := q.queryRow(ctx, q.userCategoriesGetStmt, userCategoriesGet, username)
	var category sql.NullString
	err := row.Scan(&category)
	return category, err
}

const userCategoryAdd = `-- name: UserCategoryAdd :exec
insert into UserCategories (username, category) values (?, ?)
`

type UserCategoryAddParams struct {
	Username sql.NullString `json:"username"`
	Category sql.NullString `json:"category"`
}

func (q *Queries) UserCategoryAdd(ctx context.Context, arg UserCategoryAddParams) error {
	_, err := q.exec(ctx, q.userCategoryAddStmt, userCategoryAdd, arg.Username, arg.Category)
	return err
}

const userCategoryRemove = `-- name: UserCategoryRemove :exec
delete from UserCategories where username = ? and category = ?
`

type UserCategoryRemoveParams struct {
	Username sql.NullString `json:"username"`
	Category sql.NullString `json:"category"`
}

func (q *Queries) UserCategoryRemove(ctx context.Context, arg UserCategoryRemoveParams) error {
	_, err := q.exec(ctx, q.userCategoryRemoveStmt, userCategoryRemove, arg.Username, arg.Category)
	return err
}

const userGet = `-- name: UserGet :one
SELECT username, hash, instagram_session_id, instagram_user_id, network FROM Users WHERE username = ?
`

func (q *Queries) UserGet(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.userGetStmt, userGet, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hash,
		&i.InstagramSessionID,
		&i.InstagramUserID,
		&i.Network,
	)
	return i, err
}

const userUpdateHash = `-- name: UserUpdateHash :exec
UPDATE Users SET hash = ? where username = ?
`

type UserUpdateHashParams struct {
	Hash     string `json:"hash"`
	Username string `json:"username"`
}

func (q *Queries) UserUpdateHash(ctx context.Context, arg UserUpdateHashParams) error {
	_, err := q.exec(ctx, q.userUpdateHashStmt, userUpdateHash, arg.Hash, arg.Username)
	return err
}

const userUpdateInstagramSession = `-- name: UserUpdateInstagramSession :exec
UPDATE Users SET instagram_session_id = ?, instagram_user_id = ? where username = ?
`

type UserUpdateInstagramSessionParams struct {
	InstagramSessionID string `json:"instagram_session_id"`
	InstagramUserID    string `json:"instagram_user_id"`
	Username           string `json:"username"`
}

func (q *Queries) UserUpdateInstagramSession(ctx context.Context, arg UserUpdateInstagramSessionParams) error {
	_, err := q.exec(ctx, q.userUpdateInstagramSessionStmt, userUpdateInstagramSession, arg.InstagramSessionID, arg.InstagramUserID, arg.Username)
	return err
}

const userUser = `-- name: UserUser :exec
INSERT INTO Users (
	username,
	hash,
	instagram_session_id,
	instagram_user_id,
	network
) VALUES (
	?,
	?,
	?,
	?,
	'instagram'
)
`

type UserUserParams struct {
	Username           string `json:"username"`
	Hash               string `json:"hash"`
	InstagramSessionID string `json:"instagram_session_id"`
	InstagramUserID    string `json:"instagram_user_id"`
}

func (q *Queries) UserUser(ctx context.Context, arg UserUserParams) error {
	_, err := q.exec(ctx, q.userUserStmt, userUser,
		arg.Username,
		arg.Hash,
		arg.InstagramSessionID,
		arg.InstagramUserID,
	)
	return err
}
